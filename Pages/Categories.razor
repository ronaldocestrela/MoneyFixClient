@page "/categories"
@using MoneyFixClient.Models
@using MoneyFixClient.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Categorias - MoneyFix</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-tags text-primary me-2"></i>
                    Gerenciar Categorias
                </h2>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="fas fa-plus me-2"></i>
                    Nova Categoria
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert @(alertType == "success" ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <i class="fas @(alertType == "success" ? "fa-check-circle" : "fa-exclamation-triangle") me-2"></i>
                    @alertMessage
                    <button type="button" class="btn-close" @onclick="ClearAlert"></button>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list me-2"></i>
                        Suas Categorias
                    </h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                            <p class="mt-2">Carregando categorias...</p>
                        </div>
                    }
                    else if (categories.Any())
                    {
                        <div class="row">
                            @foreach (var category in categories)
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card border-left-primary h-100">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div>
                                                    <h6 class="card-title text-primary">@category.Name</h6>
                                                    <small class="text-muted">
                                                        
                                                    </small>
                                                </div>
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                        <i class="fas fa-ellipsis-v"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a class="dropdown-item" href="#"><i class="fas fa-edit me-2"></i>Editar</a></li>
                                                        <li><a class="dropdown-item text-danger" href="#"><i class="fas fa-trash me-2"></i>Excluir</a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Nenhuma categoria encontrada</h5>
                            <p class="text-muted">Crie sua primeira categoria para organizar suas transações.</p>
                            <button class="btn btn-primary" @onclick="ShowCreateModal">
                                <i class="fas fa-plus me-2"></i>
                                Criar Primeira Categoria
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Criar Categoria -->
<div class="modal fade @(showCreateModal ? "show d-block" : "")" tabindex="-1" style="@(showCreateModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus text-primary me-2"></i>
                    Nova Categoria
                </h5>
                <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
            </div>
            <EditForm Model="@newCategory" OnValidSubmit="@CreateCategory">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Nome da Categoria</label>
                        <InputText @bind-Value="newCategory.Name" 
                                 class="form-control" 
                                 id="categoryName" 
                                 placeholder="Ex: Alimentação, Transporte, Lazer..." />
                        <ValidationMessage For="@(() => newCategory.Name)" class="text-danger" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">
                        <i class="fas fa-times me-2"></i>
                        Cancelar
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@isCreating">
                        @if (isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <text>Criando...</text>
                        }
                        else
                        {
                            <i class="fas fa-save me-2"></i>
                            <text>Criar Categoria</text>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<Category> categories = new();
    private CreateCategoryRequest newCategory = new();
    private bool isLoading = true;
    private bool isCreating = false;
    private bool showCreateModal = false;
    private string alertMessage = string.Empty;
    private string alertType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            categories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            ShowAlert($"Erro ao carregar categorias: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        newCategory = new CreateCategoryRequest();
        showCreateModal = true;
        StateHasChanged();
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
        newCategory = new CreateCategoryRequest();
        StateHasChanged();
    }

    private async Task CreateCategory()
    {
        if (isCreating) return;

        isCreating = true;
        StateHasChanged();

        try
        {
            var result = await CategoryService.CreateCategoryAsync(newCategory);

            if (result.Success)
            {
                ShowAlert(result.Message, "success");
                HideCreateModal();
                await LoadCategories(); // Recarrega a lista
            }
            else
            {
                ShowAlert(result.Message, "error");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Erro ao criar categoria: {ex.Message}", "error");
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void ShowAlert(string message, string type)
    {
        alertMessage = message;
        alertType = type;
        StateHasChanged();

        // Auto-hide alert after 5 seconds
        Task.Delay(5000).ContinueWith(_ => 
        {
            InvokeAsync(() => 
            {
                ClearAlert();
                StateHasChanged();
            });
        });
    }

    private void ClearAlert()
    {
        alertMessage = string.Empty;
        alertType = string.Empty;
    }
}
