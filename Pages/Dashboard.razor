@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject TransactionService TransactionService

<PageTitle>Dashboard - MoneyFix</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-lg-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-chart-line text-primary me-2"></i>
                    Dashboard
                </h2>
            </div>
        </div>
        <div class="col-12 col-lg-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="w-100">
                    <div class="d-flex align-items-center gap-2">
                        <input type="date" class="form-control"
                                @bind="startDate"
                                @bind:event="onchange"
                                max="@endDate.ToString("yyyy-MM-dd")" />
                        <span class="text-muted text-nowrap">até</span>
                        <input type="date" class="form-control"
                                @bind="endDate"
                                @bind:event="onchange"
                                min="@startDate.ToString("yyyy-MM-dd")"
                                max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Receitas</h6>
                            @if (isLoadingProfit)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                            }
                            else
                            {
                                <h4>@totalProfit.TotalIncome.ToString("C")</h4>
                            }
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-arrow-up fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-4">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Despesas</h6>
                            @if (isLoadingProfit)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                            }
                            else
                            {
                                <h4>@totalProfit.TotalExpense.ToString("C")</h4>
                            }
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-arrow-down fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-4">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Saldo</h6>
                            @if (isLoadingProfit)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                            }
                            else
                            {
                                <h4>@totalProfit.NetProfit.ToString("C")</h4>
                            }
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-wallet fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-4">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Transações</h6>
                            @if (isLoadingProfit)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                            }
                            else
                            {
                                <h4>@totalProfit.TransactionCount</h4>
                            }
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exchange-alt fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        Últimas Transações
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Data</th>
                                    <th>Descrição</th>
                                    <th>Categoria</th>
                                    <th>Valor</th>
                                </tr>
                            </thead>
                            @if (isLoadingLastTransactions)
                            {
                                <tbody>
                                    <tr>
                                        <td colspan="4" class="text-center">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Carregando...</span>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                            else if (recentTransactions.Any())
                            {
                                <tbody>
                                    @foreach (var transaction in recentTransactions)
                                    {
                                        <tr>
                                            <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                            <td>@transaction.TransactionDescription</td>
                                            <td>
                                                <span class="badge" style="background-color: @transaction.CategoryColor; color: #fff;">
                                                    @transaction.CategoryName
                                                </span>
                                            </td>
                                            <td>
                                                <span class="@(transaction.IsExpense ? "text-danger" : "text-success")">
                                                    @(transaction.IsExpense ? "-" : "+")@transaction.TransactionAmount.ToString("C")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            }
                            else
                            {
                                <tbody>
                                    <tr>
                                        <td colspan="4" class="text-center">Nenhuma transação recente encontrada.</td>
                                    </tr>
                                </tbody>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie me-2"></i>
                        Categorias
                    </h5>
                </div>
                <div class="card-body">
                    
                    @if (isLoadingExpensesByCategory)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                        </div>
                    }
                    else if (expensesByCategory.Any())
                    {
                        @foreach (var expense in expensesByCategory)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span>@expense.CategoryName</span>
                                    <span>@expense.Percentage.ToString("F2")%</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar" style="width: @expense.Percentage.ToString("F0")%; background-color: @expense.Color"></div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center">Nenhuma despesa por categoria encontrada.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> recentTransactions = new();
    private Profit totalProfit = new();
    private List<ExpenseByCategory> expensesByCategory = new();
    private bool isLoadingLastTransactions = false;
    private bool isLoadingProfit = false;
    private bool isLoadingExpensesByCategory = false;
    private DateTime _startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1, 0, 0, 0);
    private DateTime _endDate = DateTime.Now;

    private DateTime startDate
    {
        get => _startDate;
        set
        {
            if (_startDate != value)
            {
                _startDate = value;
                _ = InvokeAsync(RefreshData);
            }
        }
    }

    private DateTime endDate
    {
        get => _endDate;
        set
        {
            if (_endDate != value)
            {
                _endDate = value;
                _ = InvokeAsync(RefreshData);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        await Task.WhenAll(
            LoadRecentTransactions(),
            LoadTotalProfit(),
            LoadExpensesByCategory()
        );
    }

    private async Task LoadTotalProfit()
    {
        isLoadingProfit = true;
        try
        {
            totalProfit = await TransactionService.GetTotalTransactionsAsync(startDate, endDate);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar lucro total: {ex.Message}");
        }
        finally
        {
            isLoadingProfit = false;
            StateHasChanged();
        }
    }
    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    private async Task LoadRecentTransactions()
    {
        isLoadingLastTransactions = true;
        try
        {
            recentTransactions = await TransactionService.GetLastTransactionsAsync(startDate, endDate);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar transações recentes: {ex.Message}");
        }
        finally
        {
            isLoadingLastTransactions = false;
            StateHasChanged();
        }
    }

    private async Task LoadExpensesByCategory()
    {
        isLoadingExpensesByCategory = true;
        try
        {
            expensesByCategory = await TransactionService.GetExpensesByCategoryAsync(startDate, endDate);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar despesas por categoria: {ex.Message}");
        }
        finally
        {
            isLoadingExpensesByCategory = false;
            StateHasChanged();
        }
    }
}
